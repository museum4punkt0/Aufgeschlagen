//
//  InventoryProperty.cs
//  GuidePilot
//
//  
//
//  Generated by GuidePilot - EnumGenerator
//  Copyright Â© 2021 MicroMovie Media GmbH. All rights reserved.


using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Scripting;


namespace com.guidepilot.guidepilotcore {
	[Preserve]
	public class InventoryProperty: CoreObject, Sorted {
	//  Describes the meaning of the inventory property.

	[Preserve]
	public enum Type {
		OriginalTitle,
		Material,
		Measures,
		YearOfOrigin,
		Technique,
		Copyright,
		Credits,
		Collection
	}

	[Preserve]
	public class TypeConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			InventoryProperty.Type castedValue = (InventoryProperty.Type)value;
			switch (castedValue) {
			case InventoryProperty.Type.OriginalTitle:
			writer.WriteValue("ORIGINAL_TITLE");break;
			case InventoryProperty.Type.Material:
			writer.WriteValue("MATERIAL");break;
			case InventoryProperty.Type.Measures:
			writer.WriteValue("MEASURES");break;
			case InventoryProperty.Type.YearOfOrigin:
			writer.WriteValue("YEAR_OF_ORIGIN");break;
			case InventoryProperty.Type.Technique:
			writer.WriteValue("TECHNIQUE");break;
			case InventoryProperty.Type.Copyright:
			writer.WriteValue("COPYRIGHT");break;
			case InventoryProperty.Type.Credits:
			writer.WriteValue("CREDITS");break;
			case InventoryProperty.Type.Collection:
			writer.WriteValue("COLLECTION");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "ORIGINAL_TITLE":
			return InventoryProperty.Type.OriginalTitle;
			case "MATERIAL":
			return InventoryProperty.Type.Material;
			case "MEASURES":
			return InventoryProperty.Type.Measures;
			case "YEAR_OF_ORIGIN":
			return InventoryProperty.Type.YearOfOrigin;
			case "TECHNIQUE":
			return InventoryProperty.Type.Technique;
			case "COPYRIGHT":
			return InventoryProperty.Type.Copyright;
			case "CREDITS":
			return InventoryProperty.Type.Credits;
			case "COLLECTION":
			return InventoryProperty.Type.Collection;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	[JsonProperty("id")]
	private int internId;
	[JsonIgnore]
	public int id { get => internId; set => internId = value; }
	[JsonProperty("sort_index")]
	private int internSortIndex;
	[JsonIgnore]
	public int sortIndex { get => internSortIndex; set => internSortIndex = value; }
[JsonConverter(typeof(TypeConverter))]
	[JsonProperty("type")]
	public Type type;
[JsonConverter(typeof(DataTypeConverter))]
	[JsonProperty("data_type")]
	public DataType dataType;
	[JsonProperty("value")]
	public Dictionary<string, object> value;
	public void print() {
		Debug.Log("object:" + Environment.NewLine + 	"type:" + type + Environment.NewLine + 	"dataType:" + dataType + Environment.NewLine + 	"value:" + value + Environment.NewLine);
	}
	}
}