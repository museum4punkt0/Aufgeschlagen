//
//  Zone.cs
//  GuidePilot
//
//  
//
//  Generated by GuidePilot - EnumGenerator
//  Copyright Â© 2021 MicroMovie Media GmbH. All rights reserved.


using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Scripting;


namespace com.guidepilot.guidepilotcore {
	[Preserve]
	public class Zone: CoreLinkable, CoreObject, Titled {
	[Preserve]
	public enum Type {
		Area,
		Edge,
		Point
	}

	[Preserve]
	public class TypeConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			Zone.Type castedValue = (Zone.Type)value;
			switch (castedValue) {
			case Zone.Type.Area:
			writer.WriteValue("AREA");break;
			case Zone.Type.Edge:
			writer.WriteValue("EDGE");break;
			case Zone.Type.Point:
			writer.WriteValue("POINT");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "AREA":
			return Zone.Type.Area;
			case "EDGE":
			return Zone.Type.Edge;
			case "POINT":
			return Zone.Type.Point;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	[JsonProperty("suuid")]
	private string internSuuid;
	[JsonIgnore]
	public string suuid { get => internSuuid; set => internSuuid = value; }
	[JsonProperty("id")]
	private int internId;
	[JsonIgnore]
	public int id { get => internId; set => internId = value; }
	[JsonProperty("title")]
	private Dictionary<string, object> internTitle;
	[JsonIgnore]
	public Dictionary<string, object> title { get => internTitle; set => internTitle = value; }
	[JsonProperty("title_short")]
	private Dictionary<string, object> internTitleShort;
	[JsonIgnore]
	public Dictionary<string, object> titleShort { get => internTitleShort; set => internTitleShort = value; }
[JsonConverter(typeof(TypeConverter))]
	[JsonProperty("type")]
	public Type type;
	[JsonProperty("parent_zone_id")]
	public int parentZoneId;
	[JsonProperty("site_id")]
	public int siteId;
	[JsonProperty("room_id")]
	public int roomId;
	[JsonProperty("zone_coordinates")]
	public ZoneCoordinate[] zoneCoordinates;
	[JsonProperty("zone_documents")]
	public ZoneDocument[] zoneDocuments;
	public void print() {
		Debug.Log("object:" + Environment.NewLine + 	"type:" + type + Environment.NewLine + 	"parentZoneId:" + parentZoneId + Environment.NewLine + 	"siteId:" + siteId + Environment.NewLine + 	"roomId:" + roomId + Environment.NewLine + 	"zoneCoordinates:" + zoneCoordinates + Environment.NewLine + 	"zoneDocuments:" + zoneDocuments + Environment.NewLine);
	}
	}
}