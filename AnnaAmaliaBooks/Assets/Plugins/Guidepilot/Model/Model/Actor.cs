//
//  Actor.cs
//  GuidePilot
//
//  Actor
//
//  Generated by GuidePilot - EnumGenerator
//  Copyright Â© 2021 MicroMovie Media GmbH. All rights reserved.


using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Scripting;


namespace com.guidepilot.guidepilotcore {
	[Preserve]
	public class Actor: CoreLinkable, CoreObject, Named, Tagged {
	//  Describes the kind of the actor (e.g. a Person, Group or Company)

	[Preserve]
	public enum Type {
		Person,
		Group,
		Company
	}

	[Preserve]
	public class TypeConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			Actor.Type castedValue = (Actor.Type)value;
			switch (castedValue) {
			case Actor.Type.Person:
			writer.WriteValue("PERSON");break;
			case Actor.Type.Group:
			writer.WriteValue("GROUP");break;
			case Actor.Type.Company:
			writer.WriteValue("COMPANY");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "PERSON":
			return Actor.Type.Person;
			case "GROUP":
			return Actor.Type.Group;
			case "COMPANY":
			return Actor.Type.Company;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	[JsonProperty("suuid")]
	private string internSuuid;
	[JsonIgnore]
	public string suuid { get => internSuuid; set => internSuuid = value; }
	[JsonProperty("id")]
	private int internId;
	[JsonIgnore]
	public int id { get => internId; set => internId = value; }
	[JsonProperty("name")]
	private Dictionary<string, object> internName;
	[JsonIgnore]
	public Dictionary<string, object> name { get => internName; set => internName = value; }
	[JsonProperty("tags")]
	private string[] internTags;
	[JsonIgnore]
	public string[] tags { get => internTags; set => internTags = value; }
	[JsonProperty("actor_documents")]
	public ActorDocument[] actorDocuments;
	[JsonProperty("actor_relationships")]
	public Actor[] actorRelationships;
	[JsonProperty("actor_properties")]
	public ActorProperty[] actorProperties;
[JsonConverter(typeof(TypeConverter))]
	[JsonProperty("type")]
	public Type type;
	public void print() {
		Debug.Log("object:" + Environment.NewLine + 	"actorDocuments:" + actorDocuments + Environment.NewLine + 	"actorRelationships:" + actorRelationships + Environment.NewLine + 	"actorProperties:" + actorProperties + Environment.NewLine + 	"type:" + type + Environment.NewLine);
	}
	}
}