//
//  Document.cs
//  GuidePilot
//
//  Represents a server document that can be localized and can have different
//  presentations.
//
//  Generated by GuidePilot - EnumGenerator
//  Copyright Â© 2021 MicroMovie Media GmbH. All rights reserved.


using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Scripting;


namespace com.guidepilot.guidepilotcore {
	[Preserve]
	public class Document: CoreLinkable, CoreObject, Subtitled, Tagged, Titled {
	//  This is the first part of the mime type.

	[Preserve]
	public enum MediaType {
		Audio,
		Video,
		Image,
		Text,
		Font,
		Application
	}

	[Preserve]
	public class MediaTypeConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			Document.MediaType castedValue = (Document.MediaType)value;
			switch (castedValue) {
			case Document.MediaType.Audio:
			writer.WriteValue("AUDIO");break;
			case Document.MediaType.Video:
			writer.WriteValue("VIDEO");break;
			case Document.MediaType.Image:
			writer.WriteValue("IMAGE");break;
			case Document.MediaType.Text:
			writer.WriteValue("TEXT");break;
			case Document.MediaType.Font:
			writer.WriteValue("FONT");break;
			case Document.MediaType.Application:
			writer.WriteValue("APPLICATION");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "AUDIO":
			return Document.MediaType.Audio;
			case "VIDEO":
			return Document.MediaType.Video;
			case "IMAGE":
			return Document.MediaType.Image;
			case "TEXT":
			return Document.MediaType.Text;
			case "FONT":
			return Document.MediaType.Font;
			case "APPLICATION":
			return Document.MediaType.Application;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	//  This is the second part of the mime type.

	[Preserve]
	public enum MediaSubtype {
		Plain,
		Mpeg,
		Mp4,
		Jpeg,
		Png,
		Heic,
		Html,
		Ssml,
		Css,
		Javascript,
		Pdf,
		Ttf,
		Otf,
		Woff,
		Woff2,
		DotLottie,
		OctetStream
	}

	[Preserve]
	public class MediaSubtypeConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			Document.MediaSubtype castedValue = (Document.MediaSubtype)value;
			switch (castedValue) {
			case Document.MediaSubtype.Plain:
			writer.WriteValue("PLAIN");break;
			case Document.MediaSubtype.Mpeg:
			writer.WriteValue("MPEG");break;
			case Document.MediaSubtype.Mp4:
			writer.WriteValue("MP4");break;
			case Document.MediaSubtype.Jpeg:
			writer.WriteValue("JPEG");break;
			case Document.MediaSubtype.Png:
			writer.WriteValue("PNG");break;
			case Document.MediaSubtype.Heic:
			writer.WriteValue("HEIC");break;
			case Document.MediaSubtype.Html:
			writer.WriteValue("HTML");break;
			case Document.MediaSubtype.Ssml:
			writer.WriteValue("SSML+XML");break;
			case Document.MediaSubtype.Css:
			writer.WriteValue("CSS");break;
			case Document.MediaSubtype.Javascript:
			writer.WriteValue("JAVASCRIPT");break;
			case Document.MediaSubtype.Pdf:
			writer.WriteValue("PDF");break;
			case Document.MediaSubtype.Ttf:
			writer.WriteValue("TTF");break;
			case Document.MediaSubtype.Otf:
			writer.WriteValue("OTF");break;
			case Document.MediaSubtype.Woff:
			writer.WriteValue("WOFF");break;
			case Document.MediaSubtype.Woff2:
			writer.WriteValue("WOFF2");break;
			case Document.MediaSubtype.DotLottie:
			writer.WriteValue("X.GP.DOT-LOTTIE");break;
			case Document.MediaSubtype.OctetStream:
			writer.WriteValue("OCTET-STREAM");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "PLAIN":
			return Document.MediaSubtype.Plain;
			case "MPEG":
			return Document.MediaSubtype.Mpeg;
			case "MP4":
			return Document.MediaSubtype.Mp4;
			case "JPEG":
			return Document.MediaSubtype.Jpeg;
			case "PNG":
			return Document.MediaSubtype.Png;
			case "HEIC":
			return Document.MediaSubtype.Heic;
			case "HTML":
			return Document.MediaSubtype.Html;
			case "SSML+XML":
			return Document.MediaSubtype.Ssml;
			case "CSS":
			return Document.MediaSubtype.Css;
			case "JAVASCRIPT":
			return Document.MediaSubtype.Javascript;
			case "PDF":
			return Document.MediaSubtype.Pdf;
			case "TTF":
			return Document.MediaSubtype.Ttf;
			case "OTF":
			return Document.MediaSubtype.Otf;
			case "WOFF":
			return Document.MediaSubtype.Woff;
			case "WOFF2":
			return Document.MediaSubtype.Woff2;
			case "X.GP.DOT-LOTTIE":
			return Document.MediaSubtype.DotLottie;
			case "OCTET-STREAM":
			return Document.MediaSubtype.OctetStream;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	//  This is a custom extension for mime type. In some cases it is helpful to
	//  provide more information how to show the document to the user.

	[Preserve]
	public enum MediaDisplayType {
		Standard,
		SphericalProjection
	}

	[Preserve]
	public class MediaDisplayTypeConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			Document.MediaDisplayType castedValue = (Document.MediaDisplayType)value;
			switch (castedValue) {
			case Document.MediaDisplayType.Standard:
			writer.WriteValue("STANDARD");break;
			case Document.MediaDisplayType.SphericalProjection:
			writer.WriteValue("SPHERICAL_PROJECTION");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "STANDARD":
			return Document.MediaDisplayType.Standard;
			case "SPHERICAL_PROJECTION":
			return Document.MediaDisplayType.SphericalProjection;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	//  Indicates that this document is intended for use on a specific platform.

	[Preserve]
	public enum PlatformFilter {
		None,
		Ios,
		Android
	}

	[Preserve]
	public class PlatformFilterConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			Document.PlatformFilter castedValue = (Document.PlatformFilter)value;
			switch (castedValue) {
			case Document.PlatformFilter.None:
			writer.WriteValue("NONE");break;
			case Document.PlatformFilter.Ios:
			writer.WriteValue("IOS");break;
			case Document.PlatformFilter.Android:
			writer.WriteValue("ANDROID");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "NONE":
			return Document.PlatformFilter.None;
			case "IOS":
			return Document.PlatformFilter.Ios;
			case "ANDROID":
			return Document.PlatformFilter.Android;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	//  Describes the processing state of the document.

	[Preserve]
	public enum ProcessingState {
		Uninitialized,
		Waiting,
		Processing,
		Failed,
		Completed,
		NeedsUpdate
	}

	[Preserve]
	public class ProcessingStateConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			Document.ProcessingState castedValue = (Document.ProcessingState)value;
			switch (castedValue) {
			case Document.ProcessingState.Uninitialized:
			writer.WriteValue("UNINITIALIZED");break;
			case Document.ProcessingState.Waiting:
			writer.WriteValue("WAITING");break;
			case Document.ProcessingState.Processing:
			writer.WriteValue("PROCESSING");break;
			case Document.ProcessingState.Failed:
			writer.WriteValue("FAILED");break;
			case Document.ProcessingState.Completed:
			writer.WriteValue("COMPLETED");break;
			case Document.ProcessingState.NeedsUpdate:
			writer.WriteValue("NEEDS_UPDATE");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "UNINITIALIZED":
			return Document.ProcessingState.Uninitialized;
			case "WAITING":
			return Document.ProcessingState.Waiting;
			case "PROCESSING":
			return Document.ProcessingState.Processing;
			case "FAILED":
			return Document.ProcessingState.Failed;
			case "COMPLETED":
			return Document.ProcessingState.Completed;
			case "NEEDS_UPDATE":
			return Document.ProcessingState.NeedsUpdate;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	[Preserve]
	public enum ImageSizeClass: int {
		Width_24 = 24,
		Width_32 = 32,
		Width_48 = 48,
		Width_64 = 64,
		Width_96 = 96,
		Width_128 = 128,
		Width_320 = 320,
		Width_640 = 640,
		Width_750 = 750,
		Width_1080 = 1080,
		Width_1920 = 1920,
		Width_3072 = 3072,
		Width_4096 = 4096,
		Width_8192 = 8192,
}


	[Preserve]
	public enum VideoSizeClass: int {
		Height_480 = 480,
		Height_720 = 720,
		Height_1080 = 1080,
}


	[JsonProperty("suuid")]
	private string internSuuid;
	[JsonIgnore]
	public string suuid { get => internSuuid; set => internSuuid = value; }
	[JsonProperty("id")]
	private int internId;
	[JsonIgnore]
	public int id { get => internId; set => internId = value; }
	[JsonProperty("subtitle")]
	private Dictionary<string, object> internSubtitle;
	[JsonIgnore]
	public Dictionary<string, object> subtitle { get => internSubtitle; set => internSubtitle = value; }
	[JsonProperty("subtitle_short")]
	private Dictionary<string, object> internSubtitleShort;
	[JsonIgnore]
	public Dictionary<string, object> subtitleShort { get => internSubtitleShort; set => internSubtitleShort = value; }
	[JsonProperty("tags")]
	private string[] internTags;
	[JsonIgnore]
	public string[] tags { get => internTags; set => internTags = value; }
	[JsonProperty("title")]
	private Dictionary<string, object> internTitle;
	[JsonIgnore]
	public Dictionary<string, object> title { get => internTitle; set => internTitle = value; }
	[JsonProperty("title_short")]
	private Dictionary<string, object> internTitleShort;
	[JsonIgnore]
	public Dictionary<string, object> titleShort { get => internTitleShort; set => internTitleShort = value; }
	[JsonProperty("locales")]
	public string[] locales;
[JsonConverter(typeof(MediaTypeConverter))]
	[JsonProperty("media_type")]
	public MediaType mediaType;
[JsonConverter(typeof(MediaSubtypeConverter))]
	[JsonProperty("media_subtype")]
	public MediaSubtype mediaSubtype;
[JsonConverter(typeof(MediaDisplayTypeConverter))]
	[JsonProperty("media_display_type")]
	public MediaDisplayType mediaDisplayType;
[JsonConverter(typeof(PlatformFilterConverter))]
	[JsonProperty("platform_filter")]
	public PlatformFilter platformFilter;
	[JsonProperty("document_revision_id")]
	public int? documentRevisionId;
	[JsonProperty("original_width")]
	public int? originalWidth;
	[JsonProperty("original_height")]
	public int? originalHeight;
	[JsonProperty("duration")]
	public int? duration;
	[JsonProperty("schedule_offset")]
	public int? scheduleOffset;
	[JsonProperty("schedule_duration")]
	public int? scheduleDuration;
	[JsonProperty("placeholder_color")]
	public string placeholderColor;
	[JsonProperty("alternate_text")]
	public Dictionary<string, object> alternateText;
		[ObsoleteAttribute("This method is obsolete.", false)]
	[JsonProperty("credits")]
	public Dictionary<string, object> credits;
[JsonConverter(typeof(PermissionAllowConverter))]
	[JsonProperty("permission_allow")]
	public PermissionAllow permissionAllow;
	[JsonProperty("data")]
	public Dictionary<string, object> data;
	[JsonProperty("document_properties")]
	public DocumentProperty[] documentProperties;
	public void print() {
		Debug.Log("object:" + Environment.NewLine + 	"locales:" + locales + Environment.NewLine + 	"mediaType:" + mediaType + Environment.NewLine + 	"mediaSubtype:" + mediaSubtype + Environment.NewLine + 	"mediaDisplayType:" + mediaDisplayType + Environment.NewLine + 	"platformFilter:" + platformFilter + Environment.NewLine + 	"documentRevisionId:" + documentRevisionId + Environment.NewLine + 	"originalWidth:" + originalWidth + Environment.NewLine + 	"originalHeight:" + originalHeight + Environment.NewLine + 	"duration:" + duration + Environment.NewLine + 	"scheduleOffset:" + scheduleOffset + Environment.NewLine + 	"scheduleDuration:" + scheduleDuration + Environment.NewLine + 	"placeholderColor:" + placeholderColor + Environment.NewLine + 	"alternateText:" + alternateText + Environment.NewLine + 	"credits:" + credits + Environment.NewLine + 	"permissionAllow:" + permissionAllow + Environment.NewLine + 	"data:" + data + Environment.NewLine + 	"documentProperties:" + documentProperties + Environment.NewLine);
	}
	}
}