//
//  Beacon.cs
//  GuidePilot
//
//  Represents an iBeacon that can trigger a zone
//
//  Generated by GuidePilot - EnumGenerator
//  Copyright Â© 2021 MicroMovie Media GmbH. All rights reserved.


using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Scripting;


namespace com.guidepilot.guidepilotcore {
	[Preserve]
	public class Beacon: CoreLinkable, CoreObject {
	[Preserve]
	public enum Type {
		Battery,
		UsbPowered,
		Other
	}

	[Preserve]
	public class TypeConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			Beacon.Type castedValue = (Beacon.Type)value;
			switch (castedValue) {
			case Beacon.Type.Battery:
			writer.WriteValue("BATTERY");break;
			case Beacon.Type.UsbPowered:
			writer.WriteValue("USB_POWERED");break;
			case Beacon.Type.Other:
			writer.WriteValue("OTHER");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "BATTERY":
			return Beacon.Type.Battery;
			case "USB_POWERED":
			return Beacon.Type.UsbPowered;
			case "OTHER":
			return Beacon.Type.Other;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	[JsonProperty("suuid")]
	private string internSuuid;
	[JsonIgnore]
	public string suuid { get => internSuuid; set => internSuuid = value; }
	[JsonProperty("id")]
	private int internId;
	[JsonIgnore]
	public int id { get => internId; set => internId = value; }
	[JsonProperty("uuid")]
	public string uuid;
	[JsonProperty("major")]
	public int major;
	[JsonProperty("minor")]
	public int minor;
	[JsonProperty("gp_zone_id")]
	public int gpZoneId;
	public void print() {
		Debug.Log("object:" + Environment.NewLine + 	"uuid:" + uuid + Environment.NewLine + 	"major:" + major + Environment.NewLine + 	"minor:" + minor + Environment.NewLine + 	"gpZoneId:" + gpZoneId + Environment.NewLine);
	}
	}
}