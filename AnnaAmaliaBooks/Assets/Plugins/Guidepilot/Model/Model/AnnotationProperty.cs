//
//  AnnotationProperty.cs
//  GuidePilot
//
//  
//
//  Generated by GuidePilot - EnumGenerator
//  Copyright Â© 2021 MicroMovie Media GmbH. All rights reserved.


using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Scripting;


namespace com.guidepilot.guidepilotcore {
	[Preserve]
	public class AnnotationProperty: CoreObject, Sorted {
	//  Describes the meaning of the annotation property. Type custom_data is
	//  deprecated.

	[Preserve]
	public enum Type {
		Caption,
		Color,
		FillColor,
		StrokeColor,
		LineWidth
	}

	[Preserve]
	public class TypeConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			AnnotationProperty.Type castedValue = (AnnotationProperty.Type)value;
			switch (castedValue) {
			case AnnotationProperty.Type.Caption:
			writer.WriteValue("CAPTION");break;
			case AnnotationProperty.Type.Color:
			writer.WriteValue("COLOR");break;
			case AnnotationProperty.Type.FillColor:
			writer.WriteValue("FILL_COLOR");break;
			case AnnotationProperty.Type.StrokeColor:
			writer.WriteValue("STROKE_COLOR");break;
			case AnnotationProperty.Type.LineWidth:
			writer.WriteValue("LINE_WIDTH");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "CAPTION":
			return AnnotationProperty.Type.Caption;
			case "COLOR":
			return AnnotationProperty.Type.Color;
			case "FILL_COLOR":
			return AnnotationProperty.Type.FillColor;
			case "STROKE_COLOR":
			return AnnotationProperty.Type.StrokeColor;
			case "LINE_WIDTH":
			return AnnotationProperty.Type.LineWidth;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	[JsonProperty("id")]
	private int internId;
	[JsonIgnore]
	public int id { get => internId; set => internId = value; }
	[JsonProperty("sort_index")]
	private int internSortIndex;
	[JsonIgnore]
	public int sortIndex { get => internSortIndex; set => internSortIndex = value; }
[JsonConverter(typeof(TypeConverter))]
	[JsonProperty("type")]
	public Type type;
[JsonConverter(typeof(DataTypeConverter))]
	[JsonProperty("data_type")]
	public DataType dataType;
	[JsonProperty("value")]
	public Dictionary<string, object> value;
	public void print() {
		Debug.Log("object:" + Environment.NewLine + 	"type:" + type + Environment.NewLine + 	"dataType:" + dataType + Environment.NewLine + 	"value:" + value + Environment.NewLine);
	}
	}
}