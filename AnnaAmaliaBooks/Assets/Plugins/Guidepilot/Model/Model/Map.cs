//
//  Map.cs
//  GuidePilot
//
//  Generated by GuidePilot - EnumGenerator
//  Copyright Â© 2021 MicroMovie Media GmbH. All rights reserved.


using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Scripting;


namespace com.guidepilot.guidepilotcore {
	[Preserve]
	public class Map: Bounded, CoreLinkable, CoreObject, Customized, Subtitled, Tagged, Titled {
	//  Describes the type of a map and defines its coordinate system. Cartesian =
	//  Millimeters related to buildings, WGS = Latitude and Longitude

	[Preserve]
	public enum Type {
		Cartesian,
		Wgs
	}

	[Preserve]
	public class TypeConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			Map.Type castedValue = (Map.Type)value;
			switch (castedValue) {
			case Map.Type.Cartesian:
			writer.WriteValue("CARTESIAN");break;
			case Map.Type.Wgs:
			writer.WriteValue("WGS");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "CARTESIAN":
			return Map.Type.Cartesian;
			case "WGS":
			return Map.Type.Wgs;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	[JsonProperty("coordinate_left")]
	private double? internCoordinateLeft;
	[JsonIgnore]
	public double? coordinateLeft { get => internCoordinateLeft; set => internCoordinateLeft = value; }
	[JsonProperty("coordinate_bottom")]
	private double? internCoordinateBottom;
	[JsonIgnore]
	public double? coordinateBottom { get => internCoordinateBottom; set => internCoordinateBottom = value; }
	[JsonProperty("coordinate_width")]
	private double? internCoordinateWidth;
	[JsonIgnore]
	public double? coordinateWidth { get => internCoordinateWidth; set => internCoordinateWidth = value; }
	[JsonProperty("coordinate_height")]
	private double? internCoordinateHeight;
	[JsonIgnore]
	public double? coordinateHeight { get => internCoordinateHeight; set => internCoordinateHeight = value; }
	[JsonProperty("suuid")]
	private string internSuuid;
	[JsonIgnore]
	public string suuid { get => internSuuid; set => internSuuid = value; }
	[JsonProperty("id")]
	private int internId;
	[JsonIgnore]
	public int id { get => internId; set => internId = value; }
[JsonConverter(typeof(DictionaryConverter))]
	[JsonProperty("custom_data")]
	private Dictionary<string, object> internCustomData;
	[JsonIgnore]
	public Dictionary<string, object> customData { get => internCustomData; set => internCustomData = value; }
	[JsonProperty("subtitle")]
	private Dictionary<string, object> internSubtitle;
	[JsonIgnore]
	public Dictionary<string, object> subtitle { get => internSubtitle; set => internSubtitle = value; }
	[JsonProperty("subtitle_short")]
	private Dictionary<string, object> internSubtitleShort;
	[JsonIgnore]
	public Dictionary<string, object> subtitleShort { get => internSubtitleShort; set => internSubtitleShort = value; }
	[JsonProperty("tags")]
	private string[] internTags;
	[JsonIgnore]
	public string[] tags { get => internTags; set => internTags = value; }
	[JsonProperty("title")]
	private Dictionary<string, object> internTitle;
	[JsonIgnore]
	public Dictionary<string, object> title { get => internTitle; set => internTitle = value; }
	[JsonProperty("title_short")]
	private Dictionary<string, object> internTitleShort;
	[JsonIgnore]
	public Dictionary<string, object> titleShort { get => internTitleShort; set => internTitleShort = value; }
[JsonConverter(typeof(TypeConverter))]
	[JsonProperty("type")]
	public Type type;
	[JsonProperty("map_documents")]
	public MapDocument[] mapDocuments;
	[JsonProperty("scale_min")]
	public double? scaleMin;
	[JsonProperty("scale_max")]
	public double? scaleMax;
	public void print() {
		Debug.Log("object:" + Environment.NewLine + 	"type:" + type + Environment.NewLine + 	"mapDocuments:" + mapDocuments + Environment.NewLine + 	"scaleMin:" + scaleMin + Environment.NewLine + 	"scaleMax:" + scaleMax + Environment.NewLine);
	}
	}
}