//
//  CalendarTagGroupTag.cs
//  GuidePilot
//
//  Generated by GuidePilot - EnumGenerator
//  Copyright Â© 2021 MicroMovie Media GmbH. All rights reserved.


using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Scripting;


namespace com.guidepilot.guidepilotcore {
	[Preserve]
	public class CalendarTagGroupTag: CoreObject, Sorted {
	//  Weather the tag is preselected in UI or not.

	[Preserve]
	public enum Selected {
		Always,
		Never
	}

	[Preserve]
	public class SelectedConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			CalendarTagGroupTag.Selected castedValue = (CalendarTagGroupTag.Selected)value;
			switch (castedValue) {
			case CalendarTagGroupTag.Selected.Always:
			writer.WriteValue("ALWAYS");break;
			case CalendarTagGroupTag.Selected.Never:
			writer.WriteValue("NEVER");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "ALWAYS":
			return CalendarTagGroupTag.Selected.Always;
			case "NEVER":
			return CalendarTagGroupTag.Selected.Never;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	[JsonProperty("id")]
	private int internId;
	[JsonIgnore]
	public int id { get => internId; set => internId = value; }
	[JsonProperty("sort_index")]
	private int internSortIndex;
	[JsonIgnore]
	public int sortIndex { get => internSortIndex; set => internSortIndex = value; }
	[JsonProperty("calendar_tag_suuid")]
	public string calendarTagSuuid;
[JsonConverter(typeof(SelectedConverter))]
	[JsonProperty("selected")]
	public Selected selected;
[JsonConverter(typeof(EditableConverter))]
	[JsonProperty("editable")]
	public Editable editable;
	public void print() {
		Debug.Log("object:" + Environment.NewLine + 	"calendarTagSuuid:" + calendarTagSuuid + Environment.NewLine + 	"selected:" + selected + Environment.NewLine + 	"editable:" + editable + Environment.NewLine);
	}
	}
}