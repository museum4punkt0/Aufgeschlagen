//
//  ZoneRouteItem.cs
//  GuidePilot
//
//  
//
//  Generated by GuidePilot - EnumGenerator
//  Copyright Â© 2021 MicroMovie Media GmbH. All rights reserved.


using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Scripting;


namespace com.guidepilot.guidepilotcore {
	[Preserve]
	public class ZoneRouteItem: CoreObject, Sorted {
	//  Describes the kind of the zone route item object.

	[Preserve]
	public enum Type {
		Start,
		Hop,
		End
	}

	[Preserve]
	public class TypeConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			ZoneRouteItem.Type castedValue = (ZoneRouteItem.Type)value;
			switch (castedValue) {
			case ZoneRouteItem.Type.Start:
			writer.WriteValue("START");break;
			case ZoneRouteItem.Type.Hop:
			writer.WriteValue("HOP");break;
			case ZoneRouteItem.Type.End:
			writer.WriteValue("END");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "START":
			return ZoneRouteItem.Type.Start;
			case "HOP":
			return ZoneRouteItem.Type.Hop;
			case "END":
			return ZoneRouteItem.Type.End;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	[JsonProperty("id")]
	private int internId;
	[JsonIgnore]
	public int id { get => internId; set => internId = value; }
	[JsonProperty("sort_index")]
	private int internSortIndex;
	[JsonIgnore]
	public int sortIndex { get => internSortIndex; set => internSortIndex = value; }
	[JsonProperty("gp_zone_id")]
	public int gpZoneId;
[JsonConverter(typeof(TypeConverter))]
	[JsonProperty("type")]
	public Type type;
	[JsonProperty("next_zone_connection_id")]
	public int nextZoneConnectionId;
	public void print() {
		Debug.Log("object:" + Environment.NewLine + 	"gpZoneId:" + gpZoneId + Environment.NewLine + 	"type:" + type + Environment.NewLine + 	"nextZoneConnectionId:" + nextZoneConnectionId + Environment.NewLine);
	}
	}
}