//
//  Annotation.cs
//  GuidePilot
//
//  
//
//  Generated by GuidePilot - EnumGenerator
//  Copyright Â© 2021 MicroMovie Media GmbH. All rights reserved.


using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Scripting;


namespace com.guidepilot.guidepilotcore {
	[Preserve]
	public class Annotation: Anchored, CoreLinkable, CoreObject, Customized, LocaleVisibility, Prioritized, Subtitled, Tagged, Targeting, Timed, Titled {
	//  Describes the type of a annotation

	[Preserve]
	public enum Type {
		Standard,
		RoomLabel,
		RoomLabelAlternative,
		BlueDotPosition,
		InitialViewPosition,
		ExhibitionAreaBest,
		ExhibitionAreaMerged
	}

	[Preserve]
	public class TypeConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			Annotation.Type castedValue = (Annotation.Type)value;
			switch (castedValue) {
			case Annotation.Type.Standard:
			writer.WriteValue("STANDARD");break;
			case Annotation.Type.RoomLabel:
			writer.WriteValue("ROOM_LABEL");break;
			case Annotation.Type.RoomLabelAlternative:
			writer.WriteValue("ROOM_LABEL_ALTERNATIVE");break;
			case Annotation.Type.BlueDotPosition:
			writer.WriteValue("BLUE_DOT_POSITION");break;
			case Annotation.Type.InitialViewPosition:
			writer.WriteValue("INITIAL_VIEW_POSITION");break;
			case Annotation.Type.ExhibitionAreaBest:
			writer.WriteValue("EXHIBITION_AREA_BEST");break;
			case Annotation.Type.ExhibitionAreaMerged:
			writer.WriteValue("EXHIBITION_AREA_MERGED");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "STANDARD":
			return Annotation.Type.Standard;
			case "ROOM_LABEL":
			return Annotation.Type.RoomLabel;
			case "ROOM_LABEL_ALTERNATIVE":
			return Annotation.Type.RoomLabelAlternative;
			case "BLUE_DOT_POSITION":
			return Annotation.Type.BlueDotPosition;
			case "INITIAL_VIEW_POSITION":
			return Annotation.Type.InitialViewPosition;
			case "EXHIBITION_AREA_BEST":
			return Annotation.Type.ExhibitionAreaBest;
			case "EXHIBITION_AREA_MERGED":
			return Annotation.Type.ExhibitionAreaMerged;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	[JsonProperty("anchor_h")]
	private double? internAnchorH;
	[JsonIgnore]
	public double? anchorH { get => internAnchorH; set => internAnchorH = value; }
	[JsonProperty("anchor_v")]
	private double? internAnchorV;
	[JsonIgnore]
	public double? anchorV { get => internAnchorV; set => internAnchorV = value; }
	[JsonProperty("anchor_z")]
	private double? internAnchorZ;
	[JsonIgnore]
	public double? anchorZ { get => internAnchorZ; set => internAnchorZ = value; }
	[JsonProperty("suuid")]
	private string internSuuid;
	[JsonIgnore]
	public string suuid { get => internSuuid; set => internSuuid = value; }
	[JsonProperty("id")]
	private int internId;
	[JsonIgnore]
	public int id { get => internId; set => internId = value; }
[JsonConverter(typeof(DictionaryConverter))]
	[JsonProperty("custom_data")]
	private Dictionary<string, object> internCustomData;
	[JsonIgnore]
	public Dictionary<string, object> customData { get => internCustomData; set => internCustomData = value; }
	[JsonProperty("visible_in_locales")]
	private Language[] internVisibleInLocales;
	[JsonIgnore]
	public Language[] visibleInLocales { get => internVisibleInLocales; set => internVisibleInLocales = value; }
	[JsonProperty("priority")]
	private int internPriority;
	[JsonIgnore]
	public int priority { get => internPriority; set => internPriority = value; }
	[JsonProperty("subtitle")]
	private Dictionary<string, object> internSubtitle;
	[JsonIgnore]
	public Dictionary<string, object> subtitle { get => internSubtitle; set => internSubtitle = value; }
	[JsonProperty("subtitle_short")]
	private Dictionary<string, object> internSubtitleShort;
	[JsonIgnore]
	public Dictionary<string, object> subtitleShort { get => internSubtitleShort; set => internSubtitleShort = value; }
	[JsonProperty("tags")]
	private string[] internTags;
	[JsonIgnore]
	public string[] tags { get => internTags; set => internTags = value; }
[JsonConverter(typeof(TargetTypeConverter))]
	[JsonProperty("target_type")]
	private TargetType internTargetType;
	[JsonIgnore]
	public TargetType targetType { get => internTargetType; set => internTargetType = value; }
	[JsonProperty("target_uuid")]
	private string internTargetUuid;
	[JsonIgnore]
	public string targetUuid { get => internTargetUuid; set => internTargetUuid = value; }
[JsonConverter(typeof(DictionaryConverter))]
	[JsonProperty("target_data")]
	private Dictionary<string, object> internTargetData;
	[JsonIgnore]
	public Dictionary<string, object> targetData { get => internTargetData; set => internTargetData = value; }
	[JsonProperty("target_locales")]
	private Language[] internTargetLocales;
	[JsonIgnore]
	public Language[] targetLocales { get => internTargetLocales; set => internTargetLocales = value; }
	[JsonProperty("target_scope_uuid")]
	private string internTargetScopeUuid;
	[JsonIgnore]
	public string targetScopeUuid { get => internTargetScopeUuid; set => internTargetScopeUuid = value; }
	[JsonProperty("start")]
	private DateTime internStart;
	[JsonIgnore]
	public DateTime start { get => internStart; set => internStart = value; }
	[JsonProperty("end")]
	private DateTime internEnd;
	[JsonIgnore]
	public DateTime end { get => internEnd; set => internEnd = value; }
	[JsonProperty("title")]
	private Dictionary<string, object> internTitle;
	[JsonIgnore]
	public Dictionary<string, object> title { get => internTitle; set => internTitle = value; }
	[JsonProperty("title_short")]
	private Dictionary<string, object> internTitleShort;
	[JsonIgnore]
	public Dictionary<string, object> titleShort { get => internTitleShort; set => internTitleShort = value; }
	[JsonProperty("annotation_documents")]
	public AnnotationDocument[] annotationDocuments;
[JsonConverter(typeof(TypeConverter))]
	[JsonProperty("type")]
	public Type type;
	[JsonProperty("annotation_properties")]
	public AnnotationProperty[] annotationProperties;
	[JsonProperty("scale_keypoints")]
	public ScaleKeypoint[] scaleKeypoints;
	public void print() {
		Debug.Log("object:" + Environment.NewLine + 	"annotationDocuments:" + annotationDocuments + Environment.NewLine + 	"type:" + type + Environment.NewLine + 	"annotationProperties:" + annotationProperties + Environment.NewLine + 	"scaleKeypoints:" + scaleKeypoints + Environment.NewLine);
	}
	}
}