//
//  ZoneConnection.cs
//  GuidePilot
//
//  
//
//  Generated by GuidePilot - EnumGenerator
//  Copyright Â© 2021 MicroMovie Media GmbH. All rights reserved.


using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Scripting;


namespace com.guidepilot.guidepilotcore {
	[Preserve]
	public class ZoneConnection: CoreObject {
	[Preserve]
	public enum Type {
		Passage,
		Door,
		Stairs,
		Elevator,
		Escalator
	}

	[Preserve]
	public class TypeConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			ZoneConnection.Type castedValue = (ZoneConnection.Type)value;
			switch (castedValue) {
			case ZoneConnection.Type.Passage:
			writer.WriteValue("PASSAGE");break;
			case ZoneConnection.Type.Door:
			writer.WriteValue("DOOR");break;
			case ZoneConnection.Type.Stairs:
			writer.WriteValue("STAIRS");break;
			case ZoneConnection.Type.Elevator:
			writer.WriteValue("ELEVATOR");break;
			case ZoneConnection.Type.Escalator:
			writer.WriteValue("ESCALATOR");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "PASSAGE":
			return ZoneConnection.Type.Passage;
			case "DOOR":
			return ZoneConnection.Type.Door;
			case "STAIRS":
			return ZoneConnection.Type.Stairs;
			case "ELEVATOR":
			return ZoneConnection.Type.Elevator;
			case "ESCALATOR":
			return ZoneConnection.Type.Escalator;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	[JsonProperty("id")]
	private int internId;
	[JsonIgnore]
	public int id { get => internId; set => internId = value; }
	[JsonProperty("to_zone_id")]
	public int toZoneId;
	[JsonProperty("from_zone_id")]
	public int fromZoneId;
[JsonConverter(typeof(TypeConverter))]
	[JsonProperty("type")]
	public Type type;
	[JsonProperty("hassle")]
	public int? hassle;
	[JsonProperty("coordinate_id")]
	public int coordinateId;
	[JsonProperty("zone_connection_documents")]
	public ZoneConnectionDocument[] zoneConnectionDocuments;
	public void print() {
		Debug.Log("object:" + Environment.NewLine + 	"toZoneId:" + toZoneId + Environment.NewLine + 	"fromZoneId:" + fromZoneId + Environment.NewLine + 	"type:" + type + Environment.NewLine + 	"hassle:" + hassle + Environment.NewLine + 	"coordinateId:" + coordinateId + Environment.NewLine + 	"zoneConnectionDocuments:" + zoneConnectionDocuments + Environment.NewLine);
	}
	}
}