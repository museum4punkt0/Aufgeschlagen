//
//  AnalyticsConfiguration.cs
//  GuidePilot
//
//  Each entity describes how to track a event-verb combination
//
//  Generated by GuidePilot - EnumGenerator
//  Copyright Â© 2021 MicroMovie Media GmbH. All rights reserved.


using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Scripting;


namespace com.guidepilot.guidepilotcore {
	[Preserve]
	public class AnalyticsConfiguration {
	//  Describes how a event-verb combination will be handled by the app

	[Preserve]
	public enum Permission {
		Essential,
		OptIn,
		OptOut,
		Disabled
	}

	[Preserve]
	public class PermissionConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			AnalyticsConfiguration.Permission castedValue = (AnalyticsConfiguration.Permission)value;
			switch (castedValue) {
			case AnalyticsConfiguration.Permission.Essential:
			writer.WriteValue("ESSENTIAL");break;
			case AnalyticsConfiguration.Permission.OptIn:
			writer.WriteValue("OPT_IN");break;
			case AnalyticsConfiguration.Permission.OptOut:
			writer.WriteValue("OPT_OUT");break;
			case AnalyticsConfiguration.Permission.Disabled:
			writer.WriteValue("DISABLED");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "ESSENTIAL":
			return AnalyticsConfiguration.Permission.Essential;
			case "OPT_IN":
			return AnalyticsConfiguration.Permission.OptIn;
			case "OPT_OUT":
			return AnalyticsConfiguration.Permission.OptOut;
			case "DISABLED":
			return AnalyticsConfiguration.Permission.Disabled;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	//  Describes the way the event-verb combination ist collected.

	[Preserve]
	public enum Strategy {
		Single,
		OnePerSession,
		OnePerWeek,
		OnePerDay,
		OnePerHour,
		OnePerForegroundCycle
	}

	[Preserve]
	public class StrategyConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			AnalyticsConfiguration.Strategy castedValue = (AnalyticsConfiguration.Strategy)value;
			switch (castedValue) {
			case AnalyticsConfiguration.Strategy.Single:
			writer.WriteValue("SINGLE");break;
			case AnalyticsConfiguration.Strategy.OnePerSession:
			writer.WriteValue("ONE_PER_SESSION");break;
			case AnalyticsConfiguration.Strategy.OnePerWeek:
			writer.WriteValue("ONE_PER_WEEK");break;
			case AnalyticsConfiguration.Strategy.OnePerDay:
			writer.WriteValue("ONE_PER_DAY");break;
			case AnalyticsConfiguration.Strategy.OnePerHour:
			writer.WriteValue("ONE_PER_HOUR");break;
			case AnalyticsConfiguration.Strategy.OnePerForegroundCycle:
			writer.WriteValue("ONE_PER_FOREGROUND_CYCLE");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "SINGLE":
			return AnalyticsConfiguration.Strategy.Single;
			case "ONE_PER_SESSION":
			return AnalyticsConfiguration.Strategy.OnePerSession;
			case "ONE_PER_WEEK":
			return AnalyticsConfiguration.Strategy.OnePerWeek;
			case "ONE_PER_DAY":
			return AnalyticsConfiguration.Strategy.OnePerDay;
			case "ONE_PER_HOUR":
			return AnalyticsConfiguration.Strategy.OnePerHour;
			case "ONE_PER_FOREGROUND_CYCLE":
			return AnalyticsConfiguration.Strategy.OnePerForegroundCycle;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	[JsonProperty("event_class_name")]
	public string eventClassName;
	[JsonProperty("verb_value")]
	public string verbValue;
[JsonConverter(typeof(PermissionConverter))]
	[JsonProperty("permission")]
	public Permission permission;
[JsonConverter(typeof(StrategyConverter))]
	[JsonProperty("strategy")]
	public Strategy strategy;
	public void print() {
		Debug.Log("object:" + Environment.NewLine + 	"eventClassName:" + eventClassName + Environment.NewLine + 	"verbValue:" + verbValue + Environment.NewLine + 	"permission:" + permission + Environment.NewLine + 	"strategy:" + strategy + Environment.NewLine);
	}
	}
}