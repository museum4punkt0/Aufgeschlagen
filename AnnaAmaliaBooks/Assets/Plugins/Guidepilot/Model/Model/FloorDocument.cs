//
//  FloorDocument.cs
//  GuidePilot
//
//  
//
//  Generated by GuidePilot - EnumGenerator
//  Copyright Â© 2021 MicroMovie Media GmbH. All rights reserved.


using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Scripting;


namespace com.guidepilot.guidepilotcore {
	[Preserve]
	public class FloorDocument: CoreObject, DocumentRelation {
	[Preserve]
	public enum Relation {
		Groundplan
	}

	[Preserve]
	public class RelationConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			FloorDocument.Relation castedValue = (FloorDocument.Relation)value;
			switch (castedValue) {
			case FloorDocument.Relation.Groundplan:
			writer.WriteValue("GROUNDPLAN");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "GROUNDPLAN":
			return FloorDocument.Relation.Groundplan;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	[JsonProperty("priority")]
	private int internPriority;
	[JsonIgnore]
	public int priority { get => internPriority; set => internPriority = value; }
	[JsonProperty("id")]
	private int internId;
	[JsonIgnore]
	public int id { get => internId; set => internId = value; }
	[JsonProperty("document_id")]
	private int internDocumentId;
	[JsonIgnore]
	public int documentId { get => internDocumentId; set => internDocumentId = value; }
[JsonConverter(typeof(RelationConverter))]
	[JsonProperty("relation")]
	public Relation relation;
	[JsonProperty("coordinate_left")]
	public int? coordinateLeft;
	[JsonProperty("coordinate_top")]
	public int? coordinateTop;
	[JsonProperty("coordinate_width")]
	public int? coordinateWidth;
	[JsonProperty("coordinate_height")]
	public int? coordinateHeight;
	[JsonProperty("coordinate_rotation")]
	public int? coordinateRotation;
	public void print() {
		Debug.Log("object:" + Environment.NewLine + 	"relation:" + relation + Environment.NewLine + 	"coordinateLeft:" + coordinateLeft + Environment.NewLine + 	"coordinateTop:" + coordinateTop + Environment.NewLine + 	"coordinateWidth:" + coordinateWidth + Environment.NewLine + 	"coordinateHeight:" + coordinateHeight + Environment.NewLine + 	"coordinateRotation:" + coordinateRotation + Environment.NewLine);
	}
	}
}