//
//  TourStopItem.cs
//  GuidePilot
//
//  
//
//  Generated by GuidePilot - EnumGenerator
//  Copyright Â© 2021 MicroMovie Media GmbH. All rights reserved.


using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Scripting;


namespace com.guidepilot.guidepilotcore {
	[Preserve]
	public class TourStopItem: CoreObject, Customized, LegacyContent, Sorted {
	[Preserve]
	public enum Type {
		Standard,
		FindArtwork,
		MultipleChoice
	}

	[Preserve]
	public class TypeConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			TourStopItem.Type castedValue = (TourStopItem.Type)value;
			switch (castedValue) {
			case TourStopItem.Type.Standard:
			writer.WriteValue("STANDARD");break;
			case TourStopItem.Type.FindArtwork:
			writer.WriteValue("FIND_ARTWORK");break;
			case TourStopItem.Type.MultipleChoice:
			writer.WriteValue("MULTIPLE_CHOICE");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "STANDARD":
			return TourStopItem.Type.Standard;
			case "FIND_ARTWORK":
			return TourStopItem.Type.FindArtwork;
			case "MULTIPLE_CHOICE":
			return TourStopItem.Type.MultipleChoice;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	[JsonProperty("id")]
	private int internId;
	[JsonIgnore]
	public int id { get => internId; set => internId = value; }
	[JsonProperty("subtitle")]
	private Dictionary<string, object> internSubtitle;
	[JsonIgnore]
	public Dictionary<string, object> subtitle { get => internSubtitle; set => internSubtitle = value; }
	[JsonProperty("subtitle_short")]
	private Dictionary<string, object> internSubtitleShort;
	[JsonIgnore]
	public Dictionary<string, object> subtitleShort { get => internSubtitleShort; set => internSubtitleShort = value; }
	[JsonProperty("title")]
	private Dictionary<string, object> internTitle;
	[JsonIgnore]
	public Dictionary<string, object> title { get => internTitle; set => internTitle = value; }
	[JsonProperty("title_short")]
	private Dictionary<string, object> internTitleShort;
	[JsonIgnore]
	public Dictionary<string, object> titleShort { get => internTitleShort; set => internTitleShort = value; }
[JsonConverter(typeof(DictionaryConverter))]
	[JsonProperty("custom_data")]
	private Dictionary<string, object> internCustomData;
	[JsonIgnore]
	public Dictionary<string, object> customData { get => internCustomData; set => internCustomData = value; }
	[JsonProperty("inventory_id")]
	private int internInventoryId;
	[JsonIgnore]
	public int inventoryId { get => internInventoryId; set => internInventoryId = value; }
	[JsonProperty("sort_index")]
	private int internSortIndex;
	[JsonIgnore]
	public int sortIndex { get => internSortIndex; set => internSortIndex = value; }
[JsonConverter(typeof(TypeConverter))]
	[JsonProperty("type")]
	public Type type;
	[JsonProperty("tour_stop_item_documents")]
	public TourStopItemDocument[] tourStopItemDocuments;
	public void print() {
		Debug.Log("object:" + Environment.NewLine + 	"type:" + type + Environment.NewLine + 	"tourStopItemDocuments:" + tourStopItemDocuments + Environment.NewLine);
	}
	}
}