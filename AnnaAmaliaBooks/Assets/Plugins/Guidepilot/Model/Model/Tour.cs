//
//  Tour.cs
//  GuidePilot
//
//  
//
//  Generated by GuidePilot - EnumGenerator
//  Copyright Â© 2021 MicroMovie Media GmbH. All rights reserved.


using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Scripting;


namespace com.guidepilot.guidepilotcore {
	[Preserve]
	public class Tour: Colored, CoreLinkable, CoreObject, Sorted, Subtitled, Tagged, Timed, Titled {
	[Preserve]
	public enum Type {
		Standard,
		Kids,
		KidsQuiz,
		Proximity
	}

	[Preserve]
	public class TypeConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			Tour.Type castedValue = (Tour.Type)value;
			switch (castedValue) {
			case Tour.Type.Standard:
			writer.WriteValue("STANDARD");break;
			case Tour.Type.Kids:
			writer.WriteValue("KIDS");break;
			case Tour.Type.KidsQuiz:
			writer.WriteValue("KIDS_QUIZ");break;
			case Tour.Type.Proximity:
			writer.WriteValue("PROXIMITY");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "STANDARD":
			return Tour.Type.Standard;
			case "KIDS":
			return Tour.Type.Kids;
			case "KIDS_QUIZ":
			return Tour.Type.KidsQuiz;
			case "PROXIMITY":
			return Tour.Type.Proximity;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	[JsonProperty("color")]
	private string internColor;
	[JsonIgnore]
	public string color { get => internColor; set => internColor = value; }
	[JsonProperty("suuid")]
	private string internSuuid;
	[JsonIgnore]
	public string suuid { get => internSuuid; set => internSuuid = value; }
	[JsonProperty("id")]
	private int internId;
	[JsonIgnore]
	public int id { get => internId; set => internId = value; }
	[JsonProperty("sort_index")]
	private int internSortIndex;
	[JsonIgnore]
	public int sortIndex { get => internSortIndex; set => internSortIndex = value; }
	[JsonProperty("subtitle")]
	private Dictionary<string, object> internSubtitle;
	[JsonIgnore]
	public Dictionary<string, object> subtitle { get => internSubtitle; set => internSubtitle = value; }
	[JsonProperty("subtitle_short")]
	private Dictionary<string, object> internSubtitleShort;
	[JsonIgnore]
	public Dictionary<string, object> subtitleShort { get => internSubtitleShort; set => internSubtitleShort = value; }
	[JsonProperty("tags")]
	private string[] internTags;
	[JsonIgnore]
	public string[] tags { get => internTags; set => internTags = value; }
	[JsonProperty("start")]
	private DateTime internStart;
	[JsonIgnore]
	public DateTime start { get => internStart; set => internStart = value; }
	[JsonProperty("end")]
	private DateTime internEnd;
	[JsonIgnore]
	public DateTime end { get => internEnd; set => internEnd = value; }
	[JsonProperty("title")]
	private Dictionary<string, object> internTitle;
	[JsonIgnore]
	public Dictionary<string, object> title { get => internTitle; set => internTitle = value; }
	[JsonProperty("title_short")]
	private Dictionary<string, object> internTitleShort;
	[JsonIgnore]
	public Dictionary<string, object> titleShort { get => internTitleShort; set => internTitleShort = value; }
	[JsonProperty("tour_stops")]
	public TourStop[] tourStops;
	[JsonProperty("duration")]
	public int? duration;
[JsonConverter(typeof(VisibilityConverter))]
	[JsonProperty("visibility")]
	public Visibility visibility;
[JsonConverter(typeof(TypeConverter))]
	[JsonProperty("type")]
	public Type type;
	[JsonProperty("tour_documents")]
	public TourDocument[] tourDocuments;
	public void print() {
		Debug.Log("object:" + Environment.NewLine + 	"tourStops:" + tourStops + Environment.NewLine + 	"duration:" + duration + Environment.NewLine + 	"visibility:" + visibility + Environment.NewLine + 	"type:" + type + Environment.NewLine + 	"tourDocuments:" + tourDocuments + Environment.NewLine);
	}
	}
}