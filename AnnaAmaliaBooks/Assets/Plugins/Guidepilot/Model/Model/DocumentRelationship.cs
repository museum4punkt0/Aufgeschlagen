//
//  DocumentRelationship.cs
//  GuidePilot
//
//  
//
//  Generated by GuidePilot - EnumGenerator
//  Copyright Â© 2021 MicroMovie Media GmbH. All rights reserved.


using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Scripting;


namespace com.guidepilot.guidepilotcore {
	[Preserve]
	public class DocumentRelationship: CoreObject, Prioritized {
	//  Allows to describe the relation between two documents. It is always read
	//  forward: {document} {relation} {related document}. E.g.: "Html-Doc REQUIRES
	//  CSS-Doc" or "Video-Doc PREVIEWED_BY Image-Doc"

	[Preserve]
	public enum Relation {
		PreviewedBy,
		TranscriptedBy,
		AlternateFormatBy,
		PortraitAlternativeBy,
		LandscapeAlternativeBy,
		Requires,
		AssociatedTo
	}

	[Preserve]
	public class RelationConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			DocumentRelationship.Relation castedValue = (DocumentRelationship.Relation)value;
			switch (castedValue) {
			case DocumentRelationship.Relation.PreviewedBy:
			writer.WriteValue("PREVIEWED_BY");break;
			case DocumentRelationship.Relation.TranscriptedBy:
			writer.WriteValue("TRANSCRIPTED_BY");break;
			case DocumentRelationship.Relation.AlternateFormatBy:
			writer.WriteValue("ALTERNATE_FORMAT_BY");break;
			case DocumentRelationship.Relation.PortraitAlternativeBy:
			writer.WriteValue("PORTRAIT_ALTERNATIVE_BY");break;
			case DocumentRelationship.Relation.LandscapeAlternativeBy:
			writer.WriteValue("LANDSCAPE_ALTERNATIVE_BY");break;
			case DocumentRelationship.Relation.Requires:
			writer.WriteValue("REQUIRES");break;
			case DocumentRelationship.Relation.AssociatedTo:
			writer.WriteValue("ASSOCIATED_TO");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "PREVIEWED_BY":
			return DocumentRelationship.Relation.PreviewedBy;
			case "TRANSCRIPTED_BY":
			return DocumentRelationship.Relation.TranscriptedBy;
			case "ALTERNATE_FORMAT_BY":
			return DocumentRelationship.Relation.AlternateFormatBy;
			case "PORTRAIT_ALTERNATIVE_BY":
			return DocumentRelationship.Relation.PortraitAlternativeBy;
			case "LANDSCAPE_ALTERNATIVE_BY":
			return DocumentRelationship.Relation.LandscapeAlternativeBy;
			case "REQUIRES":
			return DocumentRelationship.Relation.Requires;
			case "ASSOCIATED_TO":
			return DocumentRelationship.Relation.AssociatedTo;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	[JsonProperty("id")]
	private int internId;
	[JsonIgnore]
	public int id { get => internId; set => internId = value; }
	[JsonProperty("priority")]
	private int internPriority;
	[JsonIgnore]
	public int priority { get => internPriority; set => internPriority = value; }
[JsonConverter(typeof(RelationConverter))]
	[JsonProperty("relation")]
	public Relation relation;
	[JsonProperty("document_id")]
	public int documentId;
	[JsonProperty("related_document_id")]
	public int relatedDocumentId;
	public void print() {
		Debug.Log("object:" + Environment.NewLine + 	"relation:" + relation + Environment.NewLine + 	"documentId:" + documentId + Environment.NewLine + 	"relatedDocumentId:" + relatedDocumentId + Environment.NewLine);
	}
	}
}