//
//  Exhibition.cs
//  GuidePilot
//
//  
//
//  Generated by GuidePilot - EnumGenerator
//  Copyright Â© 2021 MicroMovie Media GmbH. All rights reserved.


using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Scripting;


namespace com.guidepilot.guidepilotcore {
	[Preserve]
	public class Exhibition: Colored, CoreLinkable, CoreObject, Sorted, Subtitled, Tagged, Timed, Titled {
	[JsonProperty("color")]
	private string internColor;
	[JsonIgnore]
	public string color { get => internColor; set => internColor = value; }
	[JsonProperty("suuid")]
	private string internSuuid;
	[JsonIgnore]
	public string suuid { get => internSuuid; set => internSuuid = value; }
	[JsonProperty("id")]
	private int internId;
	[JsonIgnore]
	public int id { get => internId; set => internId = value; }
	[JsonProperty("sort_index")]
	private int internSortIndex;
	[JsonIgnore]
	public int sortIndex { get => internSortIndex; set => internSortIndex = value; }
	[JsonProperty("subtitle")]
	private Dictionary<string, object> internSubtitle;
	[JsonIgnore]
	public Dictionary<string, object> subtitle { get => internSubtitle; set => internSubtitle = value; }
	[JsonProperty("subtitle_short")]
	private Dictionary<string, object> internSubtitleShort;
	[JsonIgnore]
	public Dictionary<string, object> subtitleShort { get => internSubtitleShort; set => internSubtitleShort = value; }
	[JsonProperty("tags")]
	private string[] internTags;
	[JsonIgnore]
	public string[] tags { get => internTags; set => internTags = value; }
	[JsonProperty("start")]
	private DateTime internStart;
	[JsonIgnore]
	public DateTime start { get => internStart; set => internStart = value; }
	[JsonProperty("end")]
	private DateTime internEnd;
	[JsonIgnore]
	public DateTime end { get => internEnd; set => internEnd = value; }
	[JsonProperty("title")]
	private Dictionary<string, object> internTitle;
	[JsonIgnore]
	public Dictionary<string, object> title { get => internTitle; set => internTitle = value; }
	[JsonProperty("title_short")]
	private Dictionary<string, object> internTitleShort;
	[JsonIgnore]
	public Dictionary<string, object> titleShort { get => internTitleShort; set => internTitleShort = value; }
[JsonConverter(typeof(VisibilityConverter))]
	[JsonProperty("visibility")]
	public Visibility visibility;
	[JsonProperty("exhibition_documents")]
	public ExhibitionDocument[] exhibitionDocuments;
	public void print() {
		Debug.Log("object:" + Environment.NewLine + 	"visibility:" + visibility + Environment.NewLine + 	"exhibitionDocuments:" + exhibitionDocuments + Environment.NewLine);
	}
	}
}