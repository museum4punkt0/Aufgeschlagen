//
//  CalendarTagGroup.cs
//  GuidePilot
//
//  Groups several tags within a CalendarView
//
//  Generated by GuidePilot - EnumGenerator
//  Copyright Â© 2021 MicroMovie Media GmbH. All rights reserved.


using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Scripting;


namespace com.guidepilot.guidepilotcore {
	[Preserve]
	public class CalendarTagGroup: CoreLinkable, CoreObject, Sorted, Tagged, Titled {
	//  Recommends a presentation type for the taggroup (if visible).

	[Preserve]
	public enum Presentation {
		Collapsed,
		FullRecommended
	}

	[Preserve]
	public class PresentationConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			CalendarTagGroup.Presentation castedValue = (CalendarTagGroup.Presentation)value;
			switch (castedValue) {
			case CalendarTagGroup.Presentation.Collapsed:
			writer.WriteValue("COLLAPSED");break;
			case CalendarTagGroup.Presentation.FullRecommended:
			writer.WriteValue("FULL_RECOMMENDED");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "COLLAPSED":
			return CalendarTagGroup.Presentation.Collapsed;
			case "FULL_RECOMMENDED":
			return CalendarTagGroup.Presentation.FullRecommended;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	[JsonProperty("suuid")]
	private string internSuuid;
	[JsonIgnore]
	public string suuid { get => internSuuid; set => internSuuid = value; }
	[JsonProperty("id")]
	private int internId;
	[JsonIgnore]
	public int id { get => internId; set => internId = value; }
	[JsonProperty("sort_index")]
	private int internSortIndex;
	[JsonIgnore]
	public int sortIndex { get => internSortIndex; set => internSortIndex = value; }
	[JsonProperty("tags")]
	private string[] internTags;
	[JsonIgnore]
	public string[] tags { get => internTags; set => internTags = value; }
	[JsonProperty("title")]
	private Dictionary<string, object> internTitle;
	[JsonIgnore]
	public Dictionary<string, object> title { get => internTitle; set => internTitle = value; }
	[JsonProperty("title_short")]
	private Dictionary<string, object> internTitleShort;
	[JsonIgnore]
	public Dictionary<string, object> titleShort { get => internTitleShort; set => internTitleShort = value; }
[JsonConverter(typeof(VisibilityConverter))]
	[JsonProperty("visibility")]
	public Visibility visibility;
[JsonConverter(typeof(PresentationConverter))]
	[JsonProperty("presentation")]
	public Presentation presentation;
	[JsonProperty("calendar_tag_group_tags")]
	public CalendarTagGroupTag[] calendarTagGroupTags;
	public void print() {
		Debug.Log("object:" + Environment.NewLine + 	"visibility:" + visibility + Environment.NewLine + 	"presentation:" + presentation + Environment.NewLine + 	"calendarTagGroupTags:" + calendarTagGroupTags + Environment.NewLine);
	}
	}
}