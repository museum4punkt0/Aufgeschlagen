//
//  ActorProperty.cs
//  GuidePilot
//
//  
//
//  Generated by GuidePilot - EnumGenerator
//  Copyright Â© 2021 MicroMovie Media GmbH. All rights reserved.


using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Scripting;


namespace com.guidepilot.guidepilotcore {
	[Preserve]
	public class ActorProperty: CoreObject, Sorted {
	//  Describes the meaning of the actor property.

	[Preserve]
	public enum Type {
		Firstname,
		DateOfBirth,
		DateOfDeath,
		PlaceOfBirth,
		PlaceOfDeath,
		Teaser
	}

	[Preserve]
	public class TypeConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			ActorProperty.Type castedValue = (ActorProperty.Type)value;
			switch (castedValue) {
			case ActorProperty.Type.Firstname:
			writer.WriteValue("FIRSTNAME");break;
			case ActorProperty.Type.DateOfBirth:
			writer.WriteValue("DATE_OF_BIRTH");break;
			case ActorProperty.Type.DateOfDeath:
			writer.WriteValue("DATE_OF_DEATH");break;
			case ActorProperty.Type.PlaceOfBirth:
			writer.WriteValue("PLACE_OF_BIRTH");break;
			case ActorProperty.Type.PlaceOfDeath:
			writer.WriteValue("PLACE_OF_DEATH");break;
			case ActorProperty.Type.Teaser:
			writer.WriteValue("TEASER");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "FIRSTNAME":
			return ActorProperty.Type.Firstname;
			case "DATE_OF_BIRTH":
			return ActorProperty.Type.DateOfBirth;
			case "DATE_OF_DEATH":
			return ActorProperty.Type.DateOfDeath;
			case "PLACE_OF_BIRTH":
			return ActorProperty.Type.PlaceOfBirth;
			case "PLACE_OF_DEATH":
			return ActorProperty.Type.PlaceOfDeath;
			case "TEASER":
			return ActorProperty.Type.Teaser;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	[JsonProperty("id")]
	private int internId;
	[JsonIgnore]
	public int id { get => internId; set => internId = value; }
	[JsonProperty("sort_index")]
	private int internSortIndex;
	[JsonIgnore]
	public int sortIndex { get => internSortIndex; set => internSortIndex = value; }
[JsonConverter(typeof(TypeConverter))]
	[JsonProperty("type")]
	public Type type;
[JsonConverter(typeof(DataTypeConverter))]
	[JsonProperty("data_type")]
	public DataType dataType;
	[JsonProperty("value")]
	public Dictionary<string, object> value;
	public void print() {
		Debug.Log("object:" + Environment.NewLine + 	"type:" + type + Environment.NewLine + 	"dataType:" + dataType + Environment.NewLine + 	"value:" + value + Environment.NewLine);
	}
	}
}