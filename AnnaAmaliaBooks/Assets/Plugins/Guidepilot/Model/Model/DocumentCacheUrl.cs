//
//  DocumentCacheUrl.cs
//  GuidePilot
//
//  
//
//  Generated by GuidePilot - EnumGenerator
//  Copyright Â© 2021 MicroMovie Media GmbH. All rights reserved.


using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Scripting;


namespace com.guidepilot.guidepilotcore {
	[Preserve]
	public class DocumentCacheUrl {
	//  

	[Preserve]
	public enum DocumentScope {
		None,
		Mainpackage
	}

	[Preserve]
	public class DocumentScopeConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			DocumentCacheUrl.DocumentScope castedValue = (DocumentCacheUrl.DocumentScope)value;
			switch (castedValue) {
			case DocumentCacheUrl.DocumentScope.None:
			writer.WriteValue("NONE");break;
			case DocumentCacheUrl.DocumentScope.Mainpackage:
			writer.WriteValue("MAINPACKAGE");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "NONE":
			return DocumentCacheUrl.DocumentScope.None;
			case "MAINPACKAGE":
			return DocumentCacheUrl.DocumentScope.Mainpackage;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}

	[JsonProperty("url_key")]
	public string urlKey;
[JsonConverter(typeof(DocumentScopeConverter))]
	[JsonProperty("document_scope")]
	public DocumentScope documentScope;
	[JsonProperty("locale_string")]
	public string localeString;
	[JsonProperty("size_class_value")]
	public int? sizeClassValue;
	[JsonProperty("document_id")]
	public int documentId;
	[JsonProperty("document_revision_id")]
	public int? documentRevisionId;
	public void print() {
		Debug.Log("object:" + Environment.NewLine + 	"urlKey:" + urlKey + Environment.NewLine + 	"documentScope:" + documentScope + Environment.NewLine + 	"localeString:" + localeString + Environment.NewLine + 	"sizeClassValue:" + sizeClassValue + Environment.NewLine + 	"documentId:" + documentId + Environment.NewLine + 	"documentRevisionId:" + documentRevisionId + Environment.NewLine);
	}
	}
}