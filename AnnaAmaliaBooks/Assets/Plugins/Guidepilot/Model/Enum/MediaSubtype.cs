//
//  MediaSubtype.cs
//  GuidePilot
//
//  This is the second part of the mime type.
//
//  Generated by GuidePilot - EnumGenerator
//  Copyright Â© 2021 MicroMovie Media GmbH. All rights reserved.


using System;
using Newtonsoft.Json;
using UnityEngine.Scripting;

namespace com.guidepilot.guidepilotcore {
	[Preserve]
	public enum MediaSubtype {
		Plain,
		Mpeg,
		Mp4,
		Jpeg,
		Png,
		Heic,
		Html,
		Ssml,
		Css,
		Javascript,
		Pdf,
		Ttf,
		Otf,
		Woff,
		Woff2,
		DotLottie,
		OctetStream,
		Json
	}

	[Preserve]
	public class MediaSubtypeConverter : JsonConverter {

		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
			MediaSubtype castedValue = (MediaSubtype)value;
			switch (castedValue) {
			case MediaSubtype.Plain:
			writer.WriteValue("PLAIN");break;
			case MediaSubtype.Mpeg:
			writer.WriteValue("MPEG");break;
			case MediaSubtype.Mp4:
			writer.WriteValue("MP4");break;
			case MediaSubtype.Jpeg:
			writer.WriteValue("JPEG");break;
			case MediaSubtype.Png:
			writer.WriteValue("PNG");break;
			case MediaSubtype.Heic:
			writer.WriteValue("HEIC");break;
			case MediaSubtype.Html:
			writer.WriteValue("HTML");break;
			case MediaSubtype.Ssml:
			writer.WriteValue("SSML+XML");break;
			case MediaSubtype.Css:
			writer.WriteValue("CSS");break;
			case MediaSubtype.Javascript:
			writer.WriteValue("JAVASCRIPT");break;
			case MediaSubtype.Pdf:
			writer.WriteValue("PDF");break;
			case MediaSubtype.Ttf:
			writer.WriteValue("TTF");break;
			case MediaSubtype.Otf:
			writer.WriteValue("OTF");break;
			case MediaSubtype.Woff:
			writer.WriteValue("WOFF");break;
			case MediaSubtype.Woff2:
			writer.WriteValue("WOFF2");break;
			case MediaSubtype.DotLottie:
			writer.WriteValue("X.GP.DOT-LOTTIE");break;
			case MediaSubtype.OctetStream:
			writer.WriteValue("OCTET-STREAM");break;
			case MediaSubtype.Json:
			writer.WriteValue("JSON");break;
			}
		}

		public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer) {
			var enumString = (string)reader.Value;
			switch (enumString) {
			case "PLAIN":
			return MediaSubtype.Plain;
			case "MPEG":
			return MediaSubtype.Mpeg;
			case "MP4":
			return MediaSubtype.Mp4;
			case "JPEG":
			return MediaSubtype.Jpeg;
			case "PNG":
			return MediaSubtype.Png;
			case "HEIC":
			return MediaSubtype.Heic;
			case "HTML":
			return MediaSubtype.Html;
			case "SSML+XML":
			return MediaSubtype.Ssml;
			case "CSS":
			return MediaSubtype.Css;
			case "JAVASCRIPT":
			return MediaSubtype.Javascript;
			case "PDF":
			return MediaSubtype.Pdf;
			case "TTF":
			return MediaSubtype.Ttf;
			case "OTF":
			return MediaSubtype.Otf;
			case "WOFF":
			return MediaSubtype.Woff;
			case "WOFF2":
			return MediaSubtype.Woff2;
			case "X.GP.DOT-LOTTIE":
			return MediaSubtype.DotLottie;
			case "OCTET-STREAM":
			return MediaSubtype.OctetStream;
			case "JSON":
			return MediaSubtype.Json;
			}
			return null;
		}

		public override bool CanConvert(System.Type objectType) {
			return objectType == typeof(string);
		}
	}}
